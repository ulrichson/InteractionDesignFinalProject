#!/usr/bin/perl
use warnings;
use strict;
use Cwd;
use File::Basename qw(basename dirname fileparse);

########################################################################################################################
#                                                                                                                      #
#   PostprocessBuildPlayer - v0.2                                                                                      #
#                                                                                                                      #
#   Revision History:                                                                                                  #
#   2007-NOV-15 : Script updated to v0.2 by Tom Higgins (tom@unity3d.com)                                              #
#                 - Verified compatibility with Unity versions 1.6.2 and 2.x                                           #
#   2007-JUL-05 : Script v0.1 created by Tom Higgins (tom@unity3d.com)                                                 #
#                 - Script written to be compatible with Unity 1.6.2                                                   #
#                                                                                                                      #
########################################################################################################################


# Publish Arguments (Do not edit!) #####################################################################################

# Unity-Provided Publish Arguments
my $PublishFile =     $ARGV[0];  # The published file (stand-alone, unityweb) path
# my $PublishTarget =   $ARGV[1];  # Publish output target (stand-alone, web player, etc.)
# my $CompanyName =     $ARGV[3];  # Company name as it appears under Edit > Project Settings > Player
# my $ProductName =     $ARGV[4];  # Product name as it appears under Edit > Project Settings > Player
# my $DisplayWidth =    $ARGV[5];  # The default display width as it appears under Edit > Project Settings > Player
# my $DisplayHeight =   $ARGV[6];  # The default display height as it appears under Edit > Project Settings > Player
	
# Parse the published web player file path into a file name, folder and suffix
my ($PublishFileName, $PublishFolder, $PublishSuffix) = fileparse($PublishFile, qr/\.[^.]*/);	


print "PublishFile:   $PublishFile\n";
# print "PublishTarget: $PublishTarget\n";
# print "CompanyName:   $CompanyName\n";
# print "ProductName:   $PublishTarget\n";
# print "DisplayWidth:  $DisplayWidth\n";
# print "DisplayHeight: $DisplayHeight\n";
# 

### Tasks
#
# 1. Add the following frameworks and Resources to the project:
#       - Kamcord
#       - Resources (for Kamcord)
my $curdir               = getcwd();
my $unityAssetsXcodePath = $curdir . "/Assets/Xcode/";
my $xcodeOutputPath      = $PublishFile;

print "Unity Assets/Xcode path: " . $unityAssetsXcodePath . "\n";

# Copy files from Unity Assets/Xcode/ to the generated Xcode project
my $toPath = $PublishFile . "/Kamcord/";
`mkdir -p "$toPath"`;
`cp -R "$unityAssetsXcodePath" "$toPath"`;

# Erase all annoying .meta files
my @metafiles = `find "$toPath" -name \\*.meta -print`;
print "Erasing meta files: ", scalar(@metafiles), "\n";
foreach my $metafile (@metafiles)
{
    chomp($metafile);   # Don't forget or else rm will fail
    `rm "$metafile"`;
}


# 2. Find the first #import statement and Import <Kamcord/Unity/iPhone_GlesSupport_Kamcord.h> above that for simplicity
my $appControllerFile = $PublishFile . "/Classes/AppController.mm";
my $KamcordImport = "#import <Kamcord/Unity/iPhone_GlesSupport_Kamcord.h>";
print "AppController file: $appControllerFile\n";

# 3. Replace
#   - CreateSurfaceGLES(surface)     --> CreateSurfaceGLES(surface, _context, UnityGetGLViewController())
#   - DestroySurfaceGLES(...)        --> DestroySurfaceGLES_Kamcord(...)
#   - PreparePresentSurfaceGLES(...) --> PreparePresentSurfaceGLES_Kamcord(...)
#   - AfterPresentSurfaceGLES(...)   --> AfterPresentSurfaceGLES_Kamcord(...)
# my %replaceMapping = (
    # 'CreateSurfaceGLES\\(surface\\)' => 'CreateSurfaceGLES_Kamcord(surface, _context, UnityGetGLViewController())',
    # 'DestroySurfaceGLES\\('          => 'DestroySurfaceGLES_Kamcord(',
    # 'PreparePresentSurfaceGLES\\('   => 'PreparePresentSurfaceGLES_Kamcord(',
    # 'AfterPresentSurfaceGLES\\('     => 'AfterPresentSurfaceGLES_Kamcord(',
# );


###
### Do it
###


# Open and read the web player template file
open(AppControllerFH, "+<" . $appControllerFile) or die "Can't open $appControllerFile: $!\n";

# So disgusting: read the entire file into memory
my @file = <AppControllerFH>;

print "NumLines: ", scalar(@file), "\n";

# Seek to the beginning of the file
seek (AppControllerFH, 0, 0);

my $importedKamcord = 0;
my $includeToMatch = quotemeta("\"AppController.h\"");

# Start substituting
foreach my $line (@file)
{
    # while (my ($key, $value) = each(%replaceMapping))
    {
        # Insert the Kamcord import above this specific line
        if (!$importedKamcord)
        {
            if ($line =~ /$includeToMatch/)
            {
                print AppControllerFH $KamcordImport, "\n\n";
                $importedKamcord = 1;
            }
        }

        # # Do some search and replace
        # if ($line =~ /$key/)
        # {
            # $line =~ s/$key/$value/g;
        # }
    }
    print AppControllerFH $line;
}
close(AppControllerFH);



### Now execute the second post process build player script
my $secondScriptExecutor        = "python";
my $secondPostProcesScriptName  = '"' . join("/", $curdir,"Assets", "Editor", "KamcordPostprocessBuildPlayer2") . '"';
my $pbxProjLocation             = '"' . $PublishFile . "/Unity-iPhone.xcodeproj/project.pbxproj" . '"';
my $cmd = join(" ", $secondScriptExecutor, $secondPostProcesScriptName, $pbxProjLocation);

print "[Executing $cmd.]\n";
`$cmd`;
print "[Finished executing $cmd.]\n";

